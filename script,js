console.log("script.js loaded successfully");

function normalizeName(name) {
  if (!name) return '';
  const normalized = name
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/đ/g, 'd')
    .replace(/[^a-z\s]/g, '')
    .trim();
  return normalized;
}

function calculateLifePathNumber(day, month, year) {
  const dateStr = `${day}${month}${year}`;
  let sum = dateStr.split('').reduce((acc, digit) => acc + parseInt(digit), 0);
  while (sum > 9 && sum !== 11 && sum !== 22) {
    sum = sum.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);
  }
  return sum;
}

function calculateSoulUrgeNumber(name) {
  const vowels = { a: 1, e: 5, i: 9, o: 6, u: 3 };
  const normalizedName = normalizeName(name);
  let sum = 0;
  for (let char of normalizedName) {
    if (vowels[char]) sum += vowels[char];
  }
  while (sum > 9 && sum !== 11 && sum !== 22) {
    sum = sum.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);
  }
  return sum;
}

function calculateExpressionNumber(name) {
  const letterValues = {
    a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9,
    j: 1, k: 2, l: 3, m: 4, n: 5, o: 6, p: 7, q: 8, r: 9,
    s: 1, t: 2, u: 3, v: 4, w: 5, x: 6, y: 7, z: 8
  };
  const normalizedName = normalizeName(name);
  let sum = 0;
  for (let char of normalizedName) {
    if (letterValues[char]) sum += letterValues[char];
  }
  while (sum > 9 && sum !== 11 && sum !== 22) {
    sum = sum.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);
  }
  return sum;
}

function calculatePersonalYearNumber(day, month, year) {
  const currentYear = new Date().getFullYear();
  let sum = day + month + currentYear;
  while (sum > 9 && sum !== 11 && sum !== 22) {
    sum = sum.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);
  }
  return sum;
}

function calculateCompatibilityScore(lifePath1, lifePath2) {
  const diff = Math.abs(lifePath1 - lifePath2);
  return Math.max(10 - diff, 1) * 10;
}

function getNumberMeaning(number) {
  const meanings = {
    1: 'Số 1: Lãnh đạo, độc lập, sáng tạo.',
    2: 'Số 2: Hợp tác, nhạy cảm, cân bằng.',
    3: 'Số 3: Sáng tạo, biểu đạt, vui vẻ.',
    4: 'Số 4: Ổn định, thực tế, chăm chỉ.',
    5: 'Số 5: Tự do, phiêu lưu, thay đổi.',
    6: 'Số 6: Trách nhiệm, yêu thương, chăm sóc.',
    7: 'Số 7: Tâm linh, phân tích, sâu sắc.',
    8: 'Số 8: Tham vọng, quyền lực, thành công.',
    9: 'Số 9: Nhân đạo, lý tưởng, từ bi.',
    11: 'Số 11: Trực giác, tâm linh, truyền cảm hứng.',
    22: 'Số 22: Xây dựng, thực tế, tầm nhìn lớn.'
  };
  return meanings[number] || 'Không xác định';
}

function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

function showLoading() {
  document.getElementById('loadingOverlay').classList.add('active');
}

function hideLoading() {
  document.getElementById('loadingOverlay').classList.remove('active');
}

function validateInputs(day, month, year, name = '') {
  if (!day || !month || !year || (name && !name.trim())) {
    alert('Vui lòng nhập đầy đủ thông tin.');
    return false;
  }
  const yearNum = parseInt(year);
  if (isNaN(yearNum) || yearNum < 1900 || yearNum > 2025) {
    alert('Năm sinh phải từ 1900 đến 2025.');
    return false;
  }
  return true;
}

function calculateNumerology() {
  const name = document.getElementById('fullName').value;
  const day = parseInt(document.getElementById('day').value);
  const month = parseInt(document.getElementById('month').value);
  const year = parseInt(document.getElementById('year').value);

  if (!validateInputs(day, month, year, name)) {
    hideLoading();
    return;
  }

  showLoading();
  setTimeout(() => {
    const lifePath = calculateLifePathNumber(day, month, year);
    const soulUrge = calculateSoulUrgeNumber(name);
    const expression = calculateExpressionNumber(name);

    document.getElementById('summary').innerHTML = `
      <p><strong>Số Đường Đời:</strong> ${lifePath} - ${getNumberMeaning(lifePath)}</p>
      <p><strong>Số Linh Hồn:</strong> ${soulUrge} - ${getNumberMeaning(soulUrge)}</p>
      <p><strong>Số Biểu Đạt:</strong> ${expression} - ${getNumberMeaning(expression)}</p>
    `;
    document.getElementById('details').innerHTML = `
      <p><strong>Chi tiết về Số Đường Đời:</strong> Số ${lifePath} thể hiện con đường cuộc sống của bạn...</p>
      <p><strong>Chi tiết về Số Linh Hồn:</strong> Số ${soulUrge} phản ánh mong muốn nội tâm...</p>
      <p><strong>Chi tiết về Số Biểu Đạt:</strong> Số ${expression} cho thấy cách bạn thể hiện bản thân...</p>
    `;
    document.getElementById('calculationDetails').innerHTML = `
      <p><strong>Cách tính Số Đường Đời:</strong> Cộng tất cả các chữ số trong ngày sinh (${day}/${month}/${year})...</p>
      <p><strong>Cách tính Số Linh Hồn:</strong> Cộng giá trị số của các nguyên âm trong tên (${normalizeName(name)})...</p>
      <p><strong>Cách tính Số Biểu Đạt:</strong> Cộng giá trị số của tất cả các chữ cái trong tên (${normalizeName(name)})...</p>
    `;
    document.getElementById('meanings').innerHTML = `
      <p><strong>Ý nghĩa các con số:</strong></p>
      <p>${Object.values(getNumberMeaning).map((val, idx) => `${idx + 1}: ${val}`).join('<br>')}</p>
    `;

    document.getElementById('showMoreBtn').classList.remove('hidden');
    document.getElementById('showCalcBtn').classList.remove('hidden');
    document.getElementById('showMeaningsBtn').classList.remove('hidden');
    hideLoading();
  }, 1000);
}

function calculateDailyForecast() {
  const day = parseInt(document.getElementById('dailyDay').value);
  const month = parseInt(document.getElementById('dailyMonth').value);
  const year = parseInt(document.getElementById('dailyYear').value);

  if (!validateInputs(day, month, year)) {
    hideLoading();
    return;
  }

  showLoading();
  setTimeout(() => {
    const personalYear = calculatePersonalYearNumber(day, month, year);
    document.getElementById('dailyForecast').innerHTML = `
      <p><strong>Số Năm Cá Nhân:</strong> ${personalYear} - ${getNumberMeaning(personalYear)}</p>
      <p><strong>Dự báo hôm nay:</strong> Hôm nay là ngày tốt để...</p>
    `;
    document.getElementById('dailyCalculationDetails').innerHTML = `
      <p><strong>Cách tính Số Năm Cá Nhân:</strong> Cộng ngày, tháng sinh và năm hiện tại (${day} + ${month} + ${new Date().getFullYear()})...</p>
    `;
    document.getElementById('dailyShowCalcBtn').classList.remove('hidden');
    hideLoading();
  }, 1000);
}

function calculateCompatibility() {
  const name1 = document.getElementById('compatName1').value;
  const day1 = parseInt(document.getElementById('compatDay1').value);
  const month1 = parseInt(document.getElementById('compatMonth1').value);
  const year1 = parseInt(document.getElementById('compatYear1').value);
  const name2 = document.getElementById('compatName2').value;
  const day2 = parseInt(document.getElementById('compatDay2').value);
  const month2 = parseInt(document.getElementById('compatMonth2').value);
  const year2 = parseInt(document.getElementById('compatYear2').value);

  if (!validateInputs(day1, month1, year1, name1) || !validateInputs(day2, month2, year2, name2)) {
    hideLoading();
    return;
  }

  showLoading();
  setTimeout(() => {
    const lifePath1 = calculateLifePathNumber(day1, month1, year1);
    const lifePath2 = calculateLifePathNumber(day2, month2, year2);
    const compatScore = calculateCompatibilityScore(lifePath1, lifePath2);

    document.getElementById('compatForecast').innerHTML = `
      <p><strong>Độ tương hợp:</strong> ${compatScore}%</p>
      <p><strong>Số Đường Đời người 1:</strong> ${lifePath1} - ${getNumberMeaning(lifePath1)}</p>
      <p><strong>Số Đường Đời người 2:</strong> ${lifePath2} - ${getNumberMeaning(lifePath2)}</p>
    `;
    document.getElementById('compatCalculationDetails').innerHTML = `
      <p><strong>Cách tính độ tương hợp:</strong> So sánh Số Đường Đời của hai người...</p>
    `;
    document.getElementById('compatShowCalcBtn').classList.remove('hidden');
    hideLoading();
  }, 1000);
}

function populateDropdowns() {
  const daySelects = [document.getElementById('day'), document.getElementById('dailyDay'), document.getElementById('compatDay1'), document.getElementById('compatDay2')];
  const monthSelects = [document.getElementById('month'), document.getElementById('dailyMonth'), document.getElementById('compatMonth1'), document.getElementById('compatMonth2')];

  daySelects.forEach(select => {
    for (let i = 1; i <= 31; i++) {
      const option = document.createElement('option');
      option.value = i;
      option.textContent = i;
      select.appendChild(option);
    }
  });

  monthSelects.forEach(select => {
    for (let i = 1; i <= 12; i++) {
      const option = document.createElement('option');
      option.value = i;
      option.textContent = i;
      select.appendChild(option);
    }
  });
}

function toggleDetails(elementId, buttonId) {
  const element = document.getElementById(elementId);
  const button = document.getElementById(buttonId);
  if (element.classList.contains('details-hidden')) {
    element.classList.remove('details-hidden');
    element.classList.add('details-shown');
    button.textContent = button.textContent.replace('Xem', 'Ẩn');
  } else {
    element.classList.remove('details-shown');
    element.classList.add('details-hidden');
    button.textContent = button.textContent.replace('Ẩn', 'Xem');
  }
}

function clearInputs(tab) {
  if (tab === 'main') {
    document.getElementById('fullName').value = '';
    document.getElementById('day').value = '';
    document.getElementById('month').value = '';
    document.getElementById('year').value = '';
    document.getElementById('summary').innerHTML = '';
    document.getElementById('details').innerHTML = '';
    document.getElementById('calculationDetails').innerHTML = '';
    document.getElementById('meanings').innerHTML = '';
    document.getElementById('showMoreBtn').classList.add('hidden');
    document.getElementById('showCalcBtn').classList.add('hidden');
    document.getElementById('showMeaningsBtn').classList.add('hidden');
  } else if (tab === 'daily') {
    document.getElementById('dailyDay').value = '';
    document.getElementById('dailyMonth').value = '';
    document.getElementById('dailyYear').value = '';
    document.getElementById('dailyForecast').innerHTML = '';
    document.getElementById('dailyCalculationDetails').innerHTML = '';
    document.getElementById('dailyShowCalcBtn').classList.add('hidden');
  } else if (tab === 'compat') {
    document.getElementById('compatName1').value = '';
    document.getElementById('compatDay1').value = '';
    document.getElementById('compatMonth1').value = '';
    document.getElementById('compatYear1').value = '';
    document.getElementById('compatName2').value = '';
    document.getElementById('compatDay2').value = '';
    document.getElementById('compatMonth2').value = '';
    document.getElementById('compatYear2').value = '';
    document.getElementById('compatForecast').innerHTML = '';
    document.getElementById('compatCalculationDetails').innerHTML = '';
    document.getElementById('compatShowCalcBtn').classList.add('hidden');
  }
}

function switchTab(tabId) {
  document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
  document.getElementById(tabId + 'Tab').classList.add('active');
  document.getElementById('menuDropdown').classList.remove('active');
}

document.addEventListener('DOMContentLoaded', () => {
  populateDropdowns();

  const calculateBtn = document.getElementById('calculateBtn');
  const dailyCalculateBtn = document.getElementById('dailyCalculateBtn');
  const compatCalculateBtn = document.getElementById('compatCalculateBtn');
  const clearBtn = document.getElementById('clearBtn');
  const dailyClearBtn = document.getElementById('dailyClearBtn');
  const compatClearBtn = document.getElementById('compatClearBtn');
  const showMoreBtn = document.getElementById('showMoreBtn');
  const showCalcBtn = document.getElementById('showCalcBtn');
  const showMeaningsBtn = document.getElementById('showMeaningsBtn');
  const dailyShowCalcBtn = document.getElementById('dailyShowCalcBtn');
  const compatShowCalcBtn = document.getElementById('compatShowCalcBtn');
  const themeToggle = document.getElementById('themeToggle');
  const menuToggle = document.getElementById('menuToggle');
  const tabButtons = document.querySelectorAll('.tab-btn');

  const debouncedCalculate = debounce(calculateNumerology, 500);
  const debouncedDailyCalculate = debounce(calculateDailyForecast, 500);
  const debouncedCompatCalculate = debounce(calculateCompatibility, 500);

  calculateBtn.addEventListener('click', debouncedCalculate);
  dailyCalculateBtn.addEventListener('click', debouncedDailyCalculate);
  compatCalculateBtn.addEventListener('click', debouncedCompatCalculate);
  clearBtn.addEventListener('click', () => clearInputs('main'));
  dailyClearBtn.addEventListener('click', () => clearInputs('daily'));
  compatClearBtn.addEventListener('click', () => clearInputs('compat'));
  showMoreBtn.addEventListener('click', () => toggleDetails('details', 'showMoreBtn'));
  showCalcBtn.addEventListener('click', () => toggleDetails('calculationDetails', 'showCalcBtn'));
  showMeaningsBtn.addEventListener('click', () => toggleDetails('meanings', 'showMeaningsBtn'));
  dailyShowCalcBtn.addEventListener('click', () => toggleDetails('dailyCalculationDetails', 'dailyShowCalcBtn'));
  compatShowCalcBtn.addEventListener('click', () => toggleDetails('compatCalculationDetails', 'compatShowCalcBtn'));

  themeToggle.addEventListener('click', () => {
    document.documentElement.classList.toggle('dark');
    document.documentElement.classList.toggle('light');
    const icon = document.getElementById('themeIcon');
    icon.innerHTML = document.documentElement.classList.contains('dark')
      ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"></path>'
      : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>';
  });

  menuToggle.addEventListener('click', () => {
    document.getElementById('menuDropdown').classList.toggle('active');
  });

  tabButtons.forEach(button => {
    button.addEventListener('click', () => switchTab(button.getAttribute('data-tab')));
  });
});
